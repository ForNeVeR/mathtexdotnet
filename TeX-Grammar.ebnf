input = fractional expr , ? EOF ? ;
fractional expr = expr [ "\over" , expr ] ;
expr = term , [ expr operator , signed term ] ;
expr operator = "+" | "-" | "\pm" | "\mp" ;
signed term = [ "+" | "-" ] , term ;
term = factorial value , [ term operator , term | term ] ;
term operator = "*" | "/" | "\times" | "\cdot" | "\bmod" ;
factorial value = indexed value , [ "!" ] ;
indexed value = value , indices pair ;
value = raw value | group | bracket expr | factorial | fraction | binomial | root | function | big operator | text ;
raw value = ? number ? | ? letter ? | ? greek letter ? ;
indices pair = ( [ "^" , index ] , [ "_" , index ] ) | ( [ "_" , index ] , [ "^" , index ] ) ;
index = raw value | group ;
group = "{" , fractional expr , "}" ;
bracket expr = "{" , expr , "}" | "(" , expr , ")" | "[" , expr , "]" | "\{" , expr , "\}" ;
fraction = "\frac" , group , group ;
binomial = "\binom" , group , group ;
root = "\sqrt" , [ argument ] , group ;
function = ? function name ? , indices pair , fractional expr ;
argument = "[" , expr , "]" ;
big operator = ? big operator ? , indices pair , fractional expr ;
text =  "{" , { ? letter ? }- , "}" ;
